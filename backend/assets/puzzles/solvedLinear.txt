def draw_grid(size, box_size, path):
    """Draws a grid with a path and returns the starting coordinates."""

    screen = turtle.Screen()
    screen.setup(width=size * box_size + 50, height=size * box_size + 50)
    screen.bgcolor("white")
    turtle_instance = turtle.Turtle()
    turtle_instance.speed(0)  # Fastest speed
    turtle_instance.hideturtle()
    turtle_instance.penup()

    start_x = None
    start_y = None

    for row in range(size):
        for col in range(size):
            x = (col - size // 2) * box_size
            y = (size // 2 - row) * box_size
            turtle_instance.goto(x, y)
            turtle_instance.pendown()

            # Determine color based on location and path
            if (row, col) == (0, 0):
                color = "green"  # Top-left corner
                start_x = x + box_size / 2  # Store start coordinates
                start_y = y - box_size / 2
            elif (row, col) == (size - 1, size - 1):
                color = "gold"  # Bottom right corner
            elif (row, col) in path:
                color = "white"  # Path color
            else:
                color = "blue"  # Default color

            turtle_instance.fillcolor(color)
            turtle_instance.begin_fill()
            for _ in range(4):
                turtle_instance.forward(box_size)
                turtle_instance.left(90)
            turtle_instance.end_fill()
            turtle_instance.penup()
    return start_x, start_y  # Return the starting coordinates


def navigate_path(turtle_instance, path, box_size, size):
    """Navigates the turtle along the specified path."""
    turtle_instance.speed(2)
    turtle_instance.shape("turtle")  # Set turtle shape
    turtle_instance.color("black")
    turtle_instance.penup()

    start_row, start_col = 0, 0
    x = (start_col - grid_size // 2) * box_size + box_size//2 
    y = (grid_size // 2 - start_row) * box_size + box_size//2

    turtle_instance.goto(x, y)

    for i in range(0, len(path)):
        curr_row, curr_col = path[i]
        if(i+1 < len(path)):
            tar_row, tar_col = path[i+1]
        if((tar_row - curr_row) > 0):
            y = y - box_size
        if((tar_col - curr_col) > 0):
            x = x + box_size
        turtle_instance.goto(x, y)


grid_size = 10
box_size = 20

path = [(0, 0), (1, 0), (2, 0), (2, 1), (3, 1), (3, 2), (3, 3), (4, 3), (4, 4), (5, 4), (5, 5), (6, 5), (7, 5), (7, 6), (8, 6), (8, 7), (9, 7), (9, 8), (9, 9)]

# Draw the grid and get the starting coordinates
start_x, start_y = draw_grid(grid_size, box_size, path)

# Create a turtle instance for navigation
nav_turtle = turtle.Turtle()
nav_turtle.penup()

# Navigate the path
navigate_path(nav_turtle, path, box_size, grid_size)